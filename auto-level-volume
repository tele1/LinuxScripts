#!/bin/bash


#=============================================================================={
##    Destiny:    For automatic volume control.
     VERSION="2" 
##    Date:       2024.04.29 (Year.Month.Day) 
##    License:    GNU GPL v.3   http://www.gnu.org/licenses/gpl-3.0.en.html 
##    Source:   https://github.com/tele1/LinuxScripts
##    Script usage:   bash auto-level-volume
##    To check only directly from the website:
##      curl -L https://raw.githubusercontent.com/tele1/LinuxScripts/main/auto-level-volume | bash

#==============================================================================}
 
#=============================================================================={
# Check Dependecies - List created automatically by find-bash-dep version=10 
# source=https://github.com/tele1/LinuxScripts
 
[[ -z $(type -P amixer) ]] && DEP="$DEP"$'\n'"amixer"
[[ -z $(type -P echo) ]] && DEP="$DEP"$'\n'"echo"
[[ -z $(type -P grep) ]] && DEP="$DEP"$'\n'"grep"
[[ -z $(type -P sleep) ]] && DEP="$DEP"$'\n'"sleep"
[[ -z $(type -P true) ]] && DEP="$DEP"$'\n'"true"
[[ -z $(type -P true) ]] && DEP="$DEP"$'\n'"pactl"
 
# End script if exist any error
[ -z "$DEP" ] || { echo "   Error: Missing dependencies, before run script please install: $DEP"  ; exit 1  ;}
 
#     Used Packages: alsa-utils, 
#                   pulseaudio-utils: /usr/bin/pactl
#=============================================================================={

#=============================={
##   ==== SETTINGS: ====
Volume_of_External_Speakers="70%"
Volume_of_Headphones="20%"
#==============================}

#======================={
#   Things to do:
#   1. Close app if exist error, example from "amixer get Headphone".
#   2. "arecord" shows the volume of the music in the recording, 
#        but it is not the volume after all changes that is output from the computer.
#   3. Add quiet mode.
#   4. Add GUI for change default level volumes.
#=======================}

F_Green_Info() {
    echo -e "\e[1;32m  Info: ${1} \e[0m'"
}


while true; do

#    arecord -f "cd" "/dev/null" -d 1 -V "stereo"


#   2. "arecord" shows the volume of the music in the recording, 
#        but it is not the volume after all changes that is output from the computer.
    Output="$(arecord -f "cd" "/dev/null" -d 1 -V "mono" 2>&1 |  grep -o '[0-9]*' |tail -n9 | sort |tail -n1) "
    echo "Sound level in player = $Output %"
    echo "Master volume = $(amixer -D pulse sget Master | grep "Front Left:" | awk '{print $5}') "
    echo "Volume of music players: "
    echo "Test $(pactl list sink-inputs | grep % | awk -F "/" '{ print $2 }') "
    
    
    

    if amixer get Headphone | grep -q "off"; then
        State_New="off"
        if [[ ! "$State_New" == "$State_Old" ]] ;then
            F_Green_Info "  Headphones disconnected"
            amixer -D pulse sset Master 70% > /dev/null
            F_Green_Info "  A new master volume level is set."
        fi
        State_Old="off"
    else
        State_New="on"
        if [[ ! "$State_New" == "$State_Old" ]] ;then
            F_Green_Info "  Headphones connected"
            amixer -D pulse sset Master 20% > /dev/null
            F_Green_Info "  A new master volume level is set."
        fi
        State_Old="on"
    fi

    echo " "
    sleep 1
done


