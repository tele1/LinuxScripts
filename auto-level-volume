#!/bin/bash


#=============================================================================={
##    Destiny:    For automatic volume control.
     VERSION="5" 
##    Date:       2024.05.08 (Year.Month.Day) 
##    License:    GNU GPL v.3   http://www.gnu.org/licenses/gpl-3.0.en.html 
##    Source:   https://github.com/tele1/LinuxScripts
##    Script usage:   bash auto-level-volume
##    To check only directly from the website:
##      curl -L https://raw.githubusercontent.com/tele1/LinuxScripts/main/auto-level-volume | bash

#==============================================================================}
 
#=============================================================================={
# Check Dependecies - List created automatically by find-bash-dep version=11 
# source=https://github.com/tele1/LinuxScripts
 
[[ -z $(type -P amixer) ]] && DEP="$DEP"$'\n'"amixer"
[[ -z $(type -P arecord) ]] && DEP="$DEP"$'\n'"arecord"
[[ -z $(type -P echo) ]] && DEP="$DEP"$'\n'"echo"
[[ -z $(type -P grep) ]] && DEP="$DEP"$'\n'"grep"
[[ -z $(type -P mkdir) ]] && DEP="$DEP"$'\n'"mkdir"
[[ -z $(type -P pactl) ]] && DEP="$DEP"$'\n'"pactl"
[[ -z $(type -P sleep) ]] && DEP="$DEP"$'\n'"sleep"
[[ -z $(type -P sox) ]] && DEP="$DEP"$'\n'"sox"
[[ -z $(type -P true) ]] && DEP="$DEP"$'\n'"true"
[[ -z $(type -P yad) ]] && DEP="$DEP"$'\n'"yad"
 
# End script if exist any error
[ -z "$DEP" ] || { echo "   Error: Missing dependencies, before run script please install: $DEP"  ; exit 1  ;}
 
#     Used Packages: alsa-utils,pulseaudio-utils,sox,yad

#=============================================================================={

#=============================={
##   ==== DEFAULT SETTINGS: ====
# It is used when config file not exist.
Volume_of_External_Speakers="70%"
Volume_of_Headphones="20%"
#==============================}

#======================={
#   Things to do:
#   1. Measure the sound level after adjusting the sound level.
#       "arecord" can shows the volume of the music in the recording, 
#       but it is not the volume after all changes that is output from the computer.
#       This is music directly from the player.
#       No solution found.
#   2. Try adding another automatic audio level control.
#=======================}

#==================={
App_Config_Folder="$HOME/.config/auto-level-volume"
if [[ -f "${App_Config_Folder}/volume.conf" ]] ; then
    source "${App_Config_Folder}/volume.conf"
fi

echo " "
echo "Volume_of_External_Speakers = $Volume_of_External_Speakers"
echo "Volume_of_Headphones = $Volume_of_Headphones"
echo " "
#===================}

F_Green_Info() {
    echo -e "\e[1;32m  Info: ${1} \e[0m'"
}

F_Red_Error() {
    echo -e "\e[1;91m  Error: ${1} \e[0m'"
}

F_If_Quiet() {
    if [[ ! "$QUIET" == "ON" ]] ; then
        "${@}"
    fi
}

F_Arecord_1() {
    #   2. "arecord" shows the volume of the music in the recording, 
    #        but it is not the volume after all changes that is output from the computer.
    Arecord_1_Output="$(arecord -f "cd" "/dev/null" -d 1 -V "mono" 2>&1 |  grep -o '[0-9]*' |tail -n9 | sort |tail -n1) "
}

F_Arecord_2() {
    # One second (1) recording from the device output for example: hw:CARD=PCH,DEV=0 ( it is from output " aplay -L " )
    # Only list all devices:  aplay -L | grep -v ^" "
    Device="default"
    #Device="pulse"
    Statistics=$(arecord -q -t raw -f cd -r 44100 -D $Device -d 1 | \
    sox -t raw -r 44100 -c 2 -b 16 -e signed-integer -  -n  stat 2>&1 )
    Arecord_2_Output=$(grep "Maximum amp" <<< "$Statistics")
        #Arecord_2_Output=$(grep "Maximum amp" <<< "$Statistics")
}

#------------------------------------------------------------------------------{
Func_Main_Code() {

while true; do

               F_Arecord_1 && echo "Sound level in player = $Arecord_1_Output %"
    F_If_Quiet F_Arecord_2 && echo "S'ound' level in player = $Arecord_2_Output"
    F_If_Quiet echo "Master volume = $(amixer -D pulse sget Master | grep "Front Left:" | awk '{print $5}') "
    F_If_Quiet echo "Volume of music players: "
    F_If_Quiet echo " $(pactl list sink-inputs | grep % | awk -F "/" '{ print $2 }') "
    
    
    
    Headphone=$(amixer get Headphone)
    if [[ "$?" == "0" ]] ; then
    
        if grep -q "off" <<< "$Headphone" ; then
            State_New="off"
            if [[ ! "$State_New" == "$State_Old" ]] ;then
                F_If_Quiet F_Green_Info "  Headphones disconnected"
                amixer -D pulse sset Master $Volume_of_External_Speakers > /dev/null
                F_If_Quiet F_Green_Info "  A new master volume level is set $Volume_of_External_Speakers ."
            fi
            State_Old="off"
        else
            State_New="on"
            if [[ ! "$State_New" == "$State_Old" ]] ;then
                F_If_Quiet F_Green_Info "  Headphones connected"
                amixer -D pulse sset Master $Volume_of_Headphones > /dev/null
                F_If_Quiet F_Green_Info "  A new master volume level is set $Volume_of_Headphones ."
            fi
            State_Old="on"
        fi
    
    else
        F_Red_Error " 'amixer get Headphone' returned an error. Script can't control the sound level."
    fi
    
    F_If_Quiet echo "--------"
    F_If_Quiet echo " "
    sleep 2
    
done

}
#------------------------------------------------------------------------------}

F_GUI() {
    echo man
   GUI_Out=$( yad --form --title="Default Settings." --width=700 --height=150 \
    --field="   Set default settings if you need:":LBL \
    --field="Volume of External Speakers:":SCL 0 "${Volume_of_External_Speakers}" \
    --field="Volume of Headphones":SCL "${Volume_of_Headphones}" \
    --field="Warning: \n    Options / numbers for SCL are missing inside my \"man yad\" . \n \
    But for me in strange way working. \n \
    So for you yad may not display real values from settings. \n \
    my yad --version = 0.40.0 (GTK+ 3.24.33)":LBL )
    
    if [[ ! "$?" == 0 ]] ; then
        echo "The change to the settings was canceled by the user."
        exit 0
    fi
    Volume_of_External_Speakers="$(awk -F  '|' '{print $2}' <<< "$GUI_Out")"
    Volume_of_Headphones="$(awk -F  '|' '{print $3}' <<< "$GUI_Out")"
    mkdir -p "$App_Config_Folder"
    echo "Volume_of_External_Speakers=${Volume_of_External_Speakers}%" > "${App_Config_Folder}/volume.conf"
    echo "Volume_of_Headphones=${Volume_of_Headphones}%" >> "${App_Config_Folder}/volume.conf" 
    
    if [ -f "${App_Config_Folder}/volume.conf" ]; then
        F_Green_Info "Settings saved to ${App_Config_Folder}/volume.conf" 
    else
        echo "Error: File not exist in ${App_Config_Folder}/volume.conf"
    fi
}


case "$1" in
	"--gui"|"-g")
	    F_Green_Info "GUI started."
	    F_GUI
	;;
	"--quiet"|"-q")
		QUIET=ON
		Func_Main_Code
	;;
	"--help"|"-h")
		echo "---------------------------------------------------------"
		echo "usage: $0 --option"
		echo " "
		echo " Main:"
		echo "   --gui        -g     Only run GUI for set variables."
		echo "   --quiet      -q     Quiet mode for linux deamon."
		echo "   --help       -h     show help"
		echo " "
		echo "---------------------------------------------------------"
		exit
	;;
	*)
        Func_Main_Code
	;;
esac
