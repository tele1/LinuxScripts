#!/bin/bash


# Developed for Linux
# License: GNU GPL v.3		http://www.gnu.org/licenses/gpl-3.0.en.html
# Version 5
# Destiny: Network connection statistics 
# Script usage: bash script --help


##	LINKS:
##	https://askubuntu.com/questions/993253/is-networkmanager-sending-http-requests-to-googleusercontent-com
##	http://karunsubramanian.com/network/what-is-syn_sent-socket-status/


# Check root running
[[ $EUID -ne 0 ]] && echo -e "'\e[0;31m' This script must be run as root. '\e[0m'" && exit 1


#  netmonit dependecies
source lib/lib.netmonit.dep
source lib/lib.colors
source lib/lib.pstree
source lib/lib.comm
source lib/lib.netmonit.help


F.SHORT() {
	"${COMM}" | awk '{print $1, $2}' | sort | uniq | sort
}


F.SHORT.COUNT() {
	CON_1=$("${COMM}" | awk '{print $1, $2}' | sort | uniq -c | sort)
	OLD_1="$NEW_1"
	NEW_1="$CON_1"
	COMPARE=$(comm -13 <(echo "$OLD_1") <(echo "$NEW_1"))
	if [ ! -z "$COMPARE" ] ; then
		while read LINE ; do
			DATE_LOG=$(date +"%Y-%m-%d %T")
			if [ "$V_LOG" == 4 ] ; then
				echo "$DATE_LOG  $LINE" >> /var/log/netmonit.log
			else
				echo "$DATE_LOG  $LINE"
			fi

			if [ "$V_CATCH" == 3 ] ; then
				#if [ "$V_CATCH" == 3 ] ; then
				#	PID=$(awk '{print $5}' <<< "$LINE")
				#	echo $PID
				#fi

				case "$CATCH" in
					pid) PID=$(awk '{print $3}' <<< "$LINE")
						if [ "$PID" == "$NAME" ] ; then

							pstree -pts "$PID"

							#PROC.OF.PSTREE_2 "$PID"
							#if [ -z "$PROC_PSTREE_OUT" ] ; then 
							#	echo "  PID not found "$PID""
							#else
							#	YELLOW_ECHO "$PROC_PSTREE_OUT"
							#fi
						fi

					;;
					name)
						if grep -q "$NAME" <<< "$LINE" ; then
							PID=$(awk '{print $3}' <<< "$LINE")

							pstree -pts "$PID"

							#PROC.OF.PSTREE_2 "$PID"
							#if [ -z "$PROC_PSTREE_OUT" ] ; then 
							#	echo "  PID not found "$PID""
							#else
							#	YELLOW_ECHO "$PROC_PSTREE_OUT"
							#fi
						fi
					;;
					first-pid) PID=$(awk '{print $5}' <<< "$LINE")
						if [ "$PID" == "$NAME" ] ; then
							if [ ! "$LOCK" == "1" ] ; then
								pstree -pts "$PID"
							fi
							LOCK=1
						fi
					;;
					first-name)
						if grep -q "$NAME" <<< "$LINE" ; then
							if [ ! "$LOCK" == "1" ] ; then
								PID=$(awk '{print $3}' <<< "$LINE")
								pstree -pts "$PID"
							fi
							LOCK=1
						fi
					;;
				esac
			fi

		done <<< "$COMPARE"
	fi
}


F.LOOP.S() {
	while true ; do
		if [[ "$V_SHORTEN" == 1 ]] ; then
			if [[ "$V_NEW" == 1 ]] ; then
				F.SHORT.COUNT
			else
				F.SHORT
			fi
		else
			${COMM}
		fi
		sleep 1
	done
}


#======================================================{
LEVEL11() {
while (($#)) ; do
	#echo "loop = $# "
	case "$1" in
	--shorten) V_SHORTEN=1 ;
	;;
	--loop-s) V_LOOP_S=2  ;;
	# In loop, it only displays when there are new connections 
	--loop-s-new) V_LOOP_S=2 ;  V_SHORTEN=1 ; V_NEW=1 ;;
	--catch)  V_CATCH=3  ; shift ; 

	#---------------------------{
		[[ -z "$1" ]] && { echo "Error: First  argument "$1"  of --catch is empty" ; exit 1 ;}
		[[ -z "$2" ]] && { echo "Error: Second argument "$2"  of --catch is empty" ; exit 1 ;}

		case "$1" in
			pid)  CATCH=pid  ; NAME="$2" ;;
			name) CATCH=name ; NAME="$2" ;;
			first-pid)  CATCH=first-pid  ; NAME="$2" ;;
			first-name) CATCH=first-name ; NAME="$2" ;;
			*) 	echo "Error: With argument --catch . Wrong next argument: $1 " 
				echo "Available arguments: "
				echo "	pid" 
				echo "	name" 
				echo "	first-pid" 
				echo "	first-name" 
				exit ;;
		esac
		shift
	#---------------------------}
		shift
	;;
	--log)   V_LOG=4 ;;
	*) echo "Error: Wrong argument: $1 "  ; exit ;;
	esac
	shift
done

#[[ $V_SHORTEN == 1 ]] && { [[ -z "$WAY" ]] && { echo "Error:  variable WAY is empty" ; exit 1 ;} ;}


#     shorten                 ; WAY  ; loop               ; catch name                        ; log
echo "V_SHORTEN = $V_SHORTEN -> $V_WAY_TO ; V_LOOP_S = $V_SLEEP ; V_CATCH= $V_CATCH -> $CATCH $NAME ; V_LOG = $V_LOG"
echo =====================================


if [[ "$V_LOOP_S" == 2 ]] ; then
	F.LOOP.S
else
	if [[ "$V_SHORTEN" == 1 ]] ; then
		F.SHORT
	else
		${COMM}
	fi
fi

} 
#======================================================}


#============================================={
case $1 in
	"--tree")
		if [ -z "$2" ] ; then
			echo "No PID number, please provide PID number" ; exit 1
		fi 
		PS_TREE=$(pstree -paA)
		PROC.OF.PSTREE_2 "$2"
		if [ -z "$PROC_PSTREE_OUT" ] ; then echo "PID "$2" not found" ; exit 1 ; fi
		echo "$PROC_PSTREE_OUT"
	;;
	"--trees")
		pstree -pa
	;;
	"--help"|"-h")
		NETMONIT.HELP
	;;
#====================
	--lsof)    COMM="COMM.LSOF"    ; shift ; LEVEL11 "$@" ;;
	--netstat) COMM="COMM.NETSTAT" ; shift ; LEVEL11 "$@" ;;
	--ss)      COMM="COMM.SS"      ; shift ; LEVEL11 "$@" ;;
	--display-log) echo "-display-log"  ; shift ; 
	#---------------------------{
		case "$1" in
			--last-hour) l1=1 ;;
			--last-day)  l2=2 ;;
			--all)       l3=3 ;;
			*)  echo "Error: With argument --display-log . Wrong next argument $1 "
				echo "Available arguments: "
				echo "	--last-hour" 
				echo "	--last-day" 
				echo "	--all" 
				exit ;;
		esac
	#---------------------------}
		exit 0
	;;
	--filter-log) echo "--filter-log"  ; shift ; 
	#---------------------------{
		case "$1" in
			--most-of-all) l1=1 ;;
			--least-of-all)  l2=2 ;;
			*)  echo "Error: With argument --filter-log . Wrong next argument $1 " 
				echo "Available arguments: "
				echo "	--most-of-all" 
				echo "	--least-of-all" 
				exit ;;
		esac
	#---------------------------}
		exit 0
	;;
#====================
	*)
		echo "Unknown argument: $1"
		echo "	Try use: $0 --help"
	;; 
esac
#=============================================}
	
