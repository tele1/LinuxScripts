#!/bin/bash


# Developed for Linux
# License: GNU GPL v.3		http://www.gnu.org/licenses/gpl-3.0.en.html
# Version 1
# Destiny: Network connection statistics 
# Script usage: bash script --help


##	LINKS:
##	https://askubuntu.com/questions/993253/is-networkmanager-sending-http-requests-to-googleusercontent-com
##	http://karunsubramanian.com/network/what-is-syn_sent-socket-status/


# Check root running
[[ $EUID -ne 0 ]] && echo -e "'\e[0;31m' This script must be run as root. '\e[0m'" && exit 1


###########################}
# Check Dependecies - List created automatically by find.bash.dep.sh version=8 
# source=https://github.com/tele1/LinuxScripts
[[ -z $(type -P awk) ]] && DEP="$DEP"$'\n'"awk"
[[ -z $(type -P comm) ]] && DEP="$DEP"$'\n'"comm"
[[ -z $(type -P date) ]] && DEP="$DEP"$'\n'"date"
[[ -z $(type -P echo) ]] && DEP="$DEP"$'\n'"echo"
[[ -z $(type -P grep) ]] && DEP="$DEP"$'\n'"grep"
[[ -z $(type -P lsof) ]] && DEP="$DEP"$'\n'"lsof"
[[ -z $(type -P pstree) ]] && DEP="$DEP"$'\n'"pstree"
[[ -z $(type -P sleep) ]] && DEP="$DEP"$'\n'"sleep"
[[ -z $(type -P sort) ]] && DEP="$DEP"$'\n'"sort"
[[ -z $(type -P true) ]] && DEP="$DEP"$'\n'"true"
[[ -z $(type -P uniq) ]] && DEP="$DEP"$'\n'"uniq"
 
# End script if exist any error
[ -z "$DEP" ] || { echo "   Error: Missing dependencies, before run script please install: $DEP"  ; exit 1  ;}
###########################}


NC='\e[0m'    # Reset Color
BL='\e[0;36m' # Cyan ECHO
GN='\e[0;32m' # Green ECHO
YW='\e[0;33m' # Yellow ECHO
RD='\e[0;31m' # Red ECHO

GREEN_ECHO() {
    echo -e "${GN} $1 ${NC}"
}

YELLOW_ECHO() {
    echo -e "${YW} $1 ${NC}"
}


#======================================{
LIST_NET() {
LIST_LSOF=$(lsof -i :0-65535 | sed '1d' | awk '{print $1, $2, $8, $9, $10}')


# Remove localhost from text 
while read LINIA ; do
	DETECT_LOCALHOST=$(awk '{print $3}' <<< "$LINIA" | awk -F ':' '{print $1}')
	if [[ "$DETECT_LOCALHOST" == 'localhost' ]] ; then 
		NOWA_LINIA=""
	else
		NOWA_LINIA="$LINIA"
	fi

	NOWE_LINIE=$(echo -e "${NOWE_LINIE}\n${NOWA_LINIA}")
done <<< "$LIST_LSOF"


# Delete blank line at the beginning 
NOWE_LINIE=$(grep -v -e '^$' <<< "$NOWE_LINIE")
}
#======================================}


LIST_APPS() {
LIST_NET
# List of identical processes 
awk  '{print $1, $2}' <<< "$NOWE_LINIE" | uniq -c | awk  '{print $1, $2}'
}


#======================================================{
LOOP_3() {
	echo "Additional loop options: $2"
	echo " "
	GREEN_ECHO "TIME, {SUM OF CONNECTIONS}, NAME, PID:"
	while true ; do
		#		" lsof -i -P " alternative (However instead lsof you can try also use " netstat , ss " what you want)
		ALL_CON=$(lsof -i :0-65535 | sed '1d')
		PS_TREE=$(pstree -pt)
		##		Print sum of connections + app name
		CON_1=$(awk '{print $1, $2}' <<< "$ALL_CON" | sort | uniq -c | sort)

		OLD_1="$NEW_1"
		NEW_1="$CON_1"

		## Gor debug
		#echo "=={"
		#echo "$NEW_1" 
		#echo "$CON_1"
		#echo "==}"
		COMPARE=$(comm -13 <(echo "$OLD_1") <(echo "$NEW_1"))
		if [ ! -z "$COMPARE" ] ; then
			DATE_LOG=$(date +"%T")
			while read LINE ; do
				##	"TIME, {SUM OF CONNECTIONS}, NAME, PID:"
				echo "$DATE_LOG  $LINE"
				## 	If variable is not empty
				if [ ! -z "$2" ] ; then
					## If variable exist in line
					if grep -q "$2" <<< "$LINE" ; then
						##	Print info about connections this app
						CONNECTIONS=$(grep "$2" <<< "$ALL_CON")
						YELLOW_ECHO "CONNECTIONS:"
						YELLOW_ECHO "$CONNECTIONS"
					##	Print tree
					##  Curiosity: One tree with PID is better --> " pstree -ptsN pid PID_of_app "
					##	But I wrote the command "pstree" above because the script may be too slow and "pstree" may not catch the process.
					##	You can also save the entire output of the "pstree" command to a file / log
					##  and then inside log you can search PID of the application which you are interested.
						echo " "
						YELLOW_ECHO "ONLY SINGLE LINES FROM PSTREE:"
						LINES_FROM_TREE=$(grep "$2" <<< "$PS_TREE")
						YELLOW_ECHO "$LINES_FROM_TREE"
					## Save whole tree to log
					#	echo "================" >> /var/log/${0}.log
					#	echo "$DATE_LOG  $LINE" >> /var/log/${0}.log
					#	echo "$PS_TREE"         >> /var/log/${0}.log
					fi
				fi
			done <<< "$COMPARE"
		fi
		sleep 2
	done
}
#======================================================}


case $1 in
	"--help"|"-h")
		echo "help :)"
		echo "---------------------------------------------------------"
		echo " Script shows internet connections. "
		echo " "
		echo " Usage:   $0 --option"
		echo " "
		echo " Options:"
		echo "   -h  --help         		Show this help."
		echo " "
		echo "       --apps         		Total number of connections + name of application."
		echo " "
		echo "       --net          		Active connections and localhost status."
		echo " "
		echo "       --loop3        		The same as option --apps but with loop."
		echo "       						It displays the applications which created the new internet connection."
		echo " "
		echo "       --loop3 app_name       It allows you to display additional information about the application,"
		echo "                              internet connections and single lines from the process tree."
		echo " "
	;;
	"--apps")
		LIST_APPS
	;;
	"--net")
		LIST_NET ; echo "$NOWE_LINIE"
	;;
	"--loop3")
		LOOP_3 "$@"
	;;
	*)
		echo "Unknown option: $1"
		echo "	Try use: $0 --help"
	;; 
esac


