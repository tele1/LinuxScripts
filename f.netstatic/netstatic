#!/bin/bash


# Developed for Linux
# License: GNU GPL v.3		http://www.gnu.org/licenses/gpl-3.0.en.html
# Version 5
# Destiny: Network connection statistics 
# Script usage: bash script --help


##	LINKS:
##	https://askubuntu.com/questions/993253/is-networkmanager-sending-http-requests-to-googleusercontent-com
##	http://karunsubramanian.com/network/what-is-syn_sent-socket-status/


# Check root running
[[ $EUID -ne 0 ]] && echo -e "'\e[0;31m' This script must be run as root. '\e[0m'" && exit 1


###########################}
# Check Dependecies - List created automatically by find.bash.dep.sh version=8 
# source=https://github.com/tele1/LinuxScripts
[[ -z $(type -P awk) ]] && DEP="$DEP"$'\n'"awk"
[[ -z $(type -P comm) ]] && DEP="$DEP"$'\n'"comm"
[[ -z $(type -P date) ]] && DEP="$DEP"$'\n'"date"
[[ -z $(type -P echo) ]] && DEP="$DEP"$'\n'"echo"
[[ -z $(type -P grep) ]] && DEP="$DEP"$'\n'"grep"
[[ -z $(type -P lsof) ]] && DEP="$DEP"$'\n'"lsof"
[[ -z $(type -P pstree) ]] && DEP="$DEP"$'\n'"pstree"
[[ -z $(type -P sleep) ]] && DEP="$DEP"$'\n'"sleep"
[[ -z $(type -P sort) ]] && DEP="$DEP"$'\n'"sort"
[[ -z $(type -P true) ]] && DEP="$DEP"$'\n'"true"
[[ -z $(type -P uniq) ]] && DEP="$DEP"$'\n'"uniq"
 
# End script if exist any error
[ -z "$DEP" ] || { echo "   Error: Missing dependencies, before run script please install: $DEP"  ; exit 1  ;}
###########################}


NC='\e[0m'    # Reset Color
BL='\e[0;36m' # Cyan ECHO
GN='\e[0;32m' # Green ECHO
YW='\e[0;33m' # Yellow ECHO
RD='\e[0;31m' # Red ECHO

GREEN_ECHO() {
    echo -e "${GN}${1}${NC}"
}

YELLOW_ECHO() {
    echo -e "${YW}${1}${NC}"
}

source lib.netstatic


PART_COMMON_1_1() {
echo "test"
}




#======================================================{
L.SLEEP() {
	echo "Additional loop options: $2"
	echo " "
	GREEN_ECHO "TIME, {SUM OF CONNECTIONS}, NAME, PID:"
	while true ; do
		#		" lsof -i -P " alternative (However instead lsof you can try also use " netstat , ss " what you want)
		ALL_CON=$(lsof -i :0-65535 | sed '1d')
		PS_TREE=$(pstree -paA)
		##		Print sum of connections + app name
		CON_1=$(awk '{print $1, $2}' <<< "$ALL_CON" | sort | uniq -c | sort)

		OLD_1="$NEW_1"
		NEW_1="$CON_1"

		## For debug
		#echo "=={"
		#echo "$NEW_1" 
		#echo "$CON_1"
		#echo "==}"
		COMPARE=$(comm -13 <(echo "$OLD_1") <(echo "$NEW_1"))
		if [ ! -z "$COMPARE" ] ; then
			DATE_LOG=$(date +"%T")
			while read LINE ; do
				##	"TIME, {SUM OF CONNECTIONS}, NAME, PID:"
				echo "$DATE_LOG  $LINE"
				## 	If variable is not empty
				if [ ! -z "$2" ] ; then
					## If variable exist in line
					if grep -q "$2" <<< "$LINE" ; then
						##	Print info about connections this app
						CONNECTIONS=$(grep "$2" <<< "$ALL_CON")
						YELLOW_ECHO "  CONNECTIONS:"
						YELLOW_ECHO "$CONNECTIONS"
					##	Print tree
					##  Curiosity: One tree with PID is better --> " pstree -ptsN pid PID_of_app "
					##	But I wrote the command "pstree" above because the script may be too slow and "pstree" may not catch the process.
					##	You can also save the entire output of the "pstree" command to a file / log
					##  and then inside log you can search PID of the application which you are interested.
						echo " "
						PID=$(awk '{print $3}' <<< "$LINE")
						YELLOW_ECHO "PID = $PID"
						echo " "
						YELLOW_ECHO "  TREE ONLY ONE PROCESS FROM PSTREE:"
						PROC.OF.PSTREE_2 "$PID"
						if [ -z "$PROC_PSTREE_OUT" ] ; then 
							echo "  PID not found "$PID""
						else
							YELLOW_ECHO "$PROC_PSTREE_OUT"
						fi
						echo " "
					## Save whole tree to log
					#	echo "================" >> /var/log/${0}.log
					#	echo "$DATE_LOG  $LINE" >> /var/log/${0}.log
					#	echo "$PROC_PSTREE_OUT" >> /var/log/${0}.log
					fi
				fi
			done <<< "$COMPARE"
		fi
		sleep 2
	done
}
#======================================================}


#======================================================{
L.IP() {
##		https://unix.stackexchange.com/questions/90627/notify-of-changes-on-a-file-under-proc
##		https://www.tecmint.com/exploring-proc-file-system-in-linux/
##		https://www.slashroot.in/proc-file-system-linux-explained
##		https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html


if [ ! -f '/var/log/iptables.log' ]; then
	echo "	Missing /var/log/iptables.log file."
	echo "	This is for advanced users ! "
	echo " "
	exit 0
fi

while : ; do
	while inotifywait  -q -e modify,delete_self,move_self /var/log/iptables.log &>/dev/null ; do

echo next
#	DATE_LOG=$(date +"%T")
#	echo "$DATE_LOG  next"

		#ALL_CON=$(lsof -i | sed '1d')
		ALL_CON=$(lsof -i )
		##    Instead: pstree -spa
		PS_TREE=$(pstree -pa)
		##		Print sum of connections + app name
		CON_1=$(awk '{print $1, 	$2, $8, $9}' <<< "$ALL_CON" | sed 's/(.*)//g' | sort)

		OLD_1="$NEW_1"
		NEW_1="$CON_1"

		## For debug
		#echo "=={"
		#echo "$NEW_1" 
		#echo "$CON_1"
		#echo "==}"
		
		COMPARE=$(comm -13 <(echo "$OLD_1") <(echo "$NEW_1"))
		#echo "$COMPARE"
		#continue

		if [ ! -z "$COMPARE" ] ; then
			DATE_LOG=$(date +"%T")
			while read LINE ; do
				##	"TIME, {SUM OF CONNECTIONS}, NAME, PID:"
				echo "$DATE_LOG  $LINE" | tee -a /var/log/netstatic3.log
					## Save to log

				## 	If variable is not empty
				if [ ! -z "$2" ] ; then
					PROC_NAME=$(awk '{print $1}' <<< "$LINE")
					## If variable exist in process name
					if grep -q "$2" <<< "$PROC_NAME" ; then
						echo " "
						YELLOW_ECHO "  TREE ONLY ONE PROCESS FROM PSTREE:"
						PID=$(awk '{print $2}' <<< "$LINE")
						##   Instead: PROC.OF.PSTREE_2
						#PROC_PSTREE_OUT=$(pstree -spa "$PID")
						PROC_PSTREE_OUT=$(PROC.OF.PSTREE_2 "$PID")
						YELLOW_ECHO "$PROC_PSTREE_OUT"
						echo " "

					fi
				fi
			done <<< "$COMPARE"
		fi
	done
	echo "RESET $?"
done
}
#======================================================}

case $1 in
	"--help"|"-h")
		echo "help :)"
		echo "---------------------------------------------------------"
		echo " Script shows internet connections. "
		echo " "
		echo " Usage:   $0 --option"
		echo " "
		echo " Options:"
		echo " "
		echo "       --apps                 Total number of connections + name of application."
		echo " "
		echo "       --info PID_number      Display a tree of one process."
		echo "                              This is the same as \" pstree -spaA \" command."
		echo "                              It was designed for --l.ip and --l.sleep options to extract a process multiple times"
		echo "                               from a single output of \" pstree -pa \" ."
		echo "                              Because the life time of each process is limited."
		echo "                              - The option may have errors."
		echo " "
		echo "       --net                  Active connections and localhost status."
		echo " "
		echo "       --l.sleep              Allows you to watch new internet connections continuously."
		echo "                              It uses the \"sleep\" command to perform pauses in operation."
		echo " "
		echo "       --l.sleep app_name     You can add the application name as another parameter."
		echo "                              This allows you to get more information about a specific internet connection."
		echo " "
		echo "       --l.ip                 Allows you to watch new internet connections continuously."
		echo "                              It uses a separate iptables log file and  \"inotifywait\" command."
		echo "                              For proper operation is required manual configuration of iptables."
		echo " "
		echo "       --l.ip app_name        You can add the application name as another parameter."
		echo "                              This allows you to get more information about a specific internet connection."
		echo " "
		echo "   -h  --help                 Show this help."
		echo " "
	;;
	"--apps")
		LIST_APPS
	;;
	"--net")
		LIST_NET ; echo "$NEW_LINES"
	;;
	"--l.sleep")
		L.SLEEP "$@"
	;;
	"--l.ip")
		L.IP "$@"
	;;
	"--info")
		if [ -z "$2" ] ; then
			echo "No PID number, please provide PID number" ; exit 1
		fi 
		PS_TREE=$(pstree -paA)
		PROC.OF.PSTREE_2 "$2"
		if [ -z "$PROC_PSTREE_OUT" ] ; then echo "PID "$2" not found" ; exit 1 ; fi
		echo "$PROC_PSTREE_OUT"
	;;
	*)
		echo "Unknown option: $1"
		echo "	Try use: $0 --help"
	;; 
esac


#---- Configure log ------------------------{
##		Create file /etc/rsyslog.d/10-iptables.conf
##		 ( Number 10 from "10-iptables.conf" is to load faster than 50-default.conf
##	:msg,contains,"[IPTables] " /var/log/iptables.log


##		Create file /etc/logrotate.d/iptables
##	/var/log/iptables.log
##	{
##		rotate 2
##		daily
##		missingok
##		notifempty
##		delaycompress
##		compress
##		postrotate
##			invoke-rc.d rsyslog rotate > /dev/null
##		endscript
##	}


##		Run command
##	service rsyslog restart


##		Set Firewall iptables, for example:
##	iptables -N CHAINFILTR
##	iptables -A OUTPUT -m conntrack --ctstate NEW -j CHAINFILTR
##	iptables -A CHAINFILTR -m recent --set --name FILTRNOWY --mask 255.255.255.255 --rdest
##	iptables -A CHAINFILTR -m recent ! --rcheck --seconds 60 --hitcount 2 --name FILTRNOWY --mask 255.255.255.255 --rdest -j LOG --log-prefix "[iptables] "


##		Test: run it and check iptables.log
##	for K in {1..240} ; do  date +%T ; nc -vz 127.0.0.1 58 ; sleep 2 ; done
#---- Configure log ------------------------}





